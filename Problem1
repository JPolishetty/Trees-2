/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int postInd;
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        if(inorder != null && inorder.length != postorder.length){
            return null;
        }
        //Postorder --> L R Root 
        //Inorder --> L Root R
        //In postorder, last element is Root, find root in inorder and nodes befor that are to left and after are right
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i=0; i< inorder.length; i++){
            map.put(inorder[i], i);
        }
        postInd = postorder.length-1;
        return helper(postorder, 0, postorder.length-1, map);
    }

    private TreeNode helper(int[] post, int start, int end, HashMap<Integer, Integer> map){
        if(start > end){
            return null;
        }
        TreeNode root = new TreeNode(post[postInd]);
        postInd--;
        int inIdx = map.get(root.val);
        root.right = helper(post, inIdx +1, end, map);
        root.left = helper(post, start, inIdx - 1 , map);
        return root;
    }
}
